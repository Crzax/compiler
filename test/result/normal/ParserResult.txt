
----------------------------------语法分析过程----------------------------------

第1步
分析栈:<函数定义> # 
遗留串:type id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数定义>-><修饰词闭包><类型><变量>(<参数声明>){<函数块>}

第2步
分析栈:<修饰词闭包> <类型> <变量> ( <参数声明> ) { <函数块> } # 
遗留串:type id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <修饰词闭包>->$

第3步
分析栈:<类型> <变量> ( <参数声明> ) { <函数块> } # 
遗留串:type id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <类型>->type<取地址>

第4步
分析栈:type <取地址> <变量> ( <参数声明> ) { <函数块> } # 
遗留串:type id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: type匹配 

第5步
分析栈:<取地址> <变量> ( <参数声明> ) { <函数块> } # 
遗留串:id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <取地址>-><星号闭包>

第6步
分析栈:<星号闭包> <变量> ( <参数声明> ) { <函数块> } # 
遗留串:id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <星号闭包>->$

第7步
分析栈:<变量> ( <参数声明> ) { <函数块> } # 
遗留串:id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第8步
分析栈:<标志符> <数组下标> ( <参数声明> ) { <函数块> } # 
遗留串:id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第9步
分析栈:id <数组下标> ( <参数声明> ) { <函数块> } # 
遗留串:id ( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第10步
分析栈:<数组下标> ( <参数声明> ) { <函数块> } # 
遗留串:( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第11步
分析栈:( <参数声明> ) { <函数块> } # 
遗留串:( ) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: (匹配 

第12步
分析栈:<参数声明> ) { <函数块> } # 
遗留串:) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <参数声明>->$

第13步
分析栈:) { <函数块> } # 
遗留串:) { type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: )匹配 

第14步
分析栈:{ <函数块> } # 
遗留串:{ type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: {匹配 

第15步
分析栈:<函数块> } # 
遗留串:type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块>-><声明语句闭包><函数块闭包>

第16步
分析栈:<声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句闭包>-><声明语句><声明语句闭包>

第17步
分析栈:<声明语句> <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句>-><声明>;

第18步
分析栈:<声明> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明>-><修饰词闭包><类型><变量><赋初值>

第19步
分析栈:<修饰词闭包> <类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <修饰词闭包>->$

第20步
分析栈:<类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <类型>->type<取地址>

第21步
分析栈:type <取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: type匹配 

第22步
分析栈:<取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <取地址>-><星号闭包>

第23步
分析栈:<星号闭包> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <星号闭包>->$

第24步
分析栈:<变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第25步
分析栈:<标志符> <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第26步
分析栈:id <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第27步
分析栈:<数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:= digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第28步
分析栈:<赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:= digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋初值>->=<右值>

第29步
分析栈:= <右值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:= digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: =匹配 

第30步
分析栈:<右值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <右值>-><表达式>

第31步
分析栈:<表达式> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第32步
分析栈:<因子> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第33步
分析栈:<因式> <因式递归> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第34步
分析栈:<数字> <因式递归> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第35步
分析栈:digit <因式递归> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第36步
分析栈:<因式递归> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第37步
分析栈:<项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第38步
分析栈:; <声明语句闭包> <函数块闭包> } # 
遗留串:; type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第39步
分析栈:<声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句闭包>-><声明语句><声明语句闭包>

第40步
分析栈:<声明语句> <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句>-><声明>;

第41步
分析栈:<声明> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明>-><修饰词闭包><类型><变量><赋初值>

第42步
分析栈:<修饰词闭包> <类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <修饰词闭包>->$

第43步
分析栈:<类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <类型>->type<取地址>

第44步
分析栈:type <取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: type匹配 

第45步
分析栈:<取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <取地址>-><星号闭包>

第46步
分析栈:<星号闭包> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <星号闭包>->$

第47步
分析栈:<变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第48步
分析栈:<标志符> <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第49步
分析栈:id <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id = digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第50步
分析栈:<数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:= digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第51步
分析栈:<赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:= digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋初值>->=<右值>

第52步
分析栈:= <右值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:= digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: =匹配 

第53步
分析栈:<右值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <右值>-><表达式>

第54步
分析栈:<表达式> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第55步
分析栈:<因子> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第56步
分析栈:<因式> <因式递归> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第57步
分析栈:<数字> <因式递归> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第58步
分析栈:digit <因式递归> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第59步
分析栈:<因式递归> <项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第60步
分析栈:<项> ; <声明语句闭包> <函数块闭包> } # 
遗留串:; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第61步
分析栈:; <声明语句闭包> <函数块闭包> } # 
遗留串:; type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第62步
分析栈:<声明语句闭包> <函数块闭包> } # 
遗留串:type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句闭包>-><声明语句><声明语句闭包>

第63步
分析栈:<声明语句> <声明语句闭包> <函数块闭包> } # 
遗留串:type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句>-><声明>;

第64步
分析栈:<声明> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明>-><修饰词闭包><类型><变量><赋初值>

第65步
分析栈:<修饰词闭包> <类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <修饰词闭包>->$

第66步
分析栈:<类型> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <类型>->type<取地址>

第67步
分析栈:type <取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:type id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: type匹配 

第68步
分析栈:<取地址> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <取地址>-><星号闭包>

第69步
分析栈:<星号闭包> <变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <星号闭包>->$

第70步
分析栈:<变量> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第71步
分析栈:<标志符> <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第72步
分析栈:id <数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:id [ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第73步
分析栈:<数组下标> <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:[ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->[<因式>]

第74步
分析栈:[ <因式> ] <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:[ digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: [匹配 

第75步
分析栈:<因式> ] <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第76步
分析栈:<数字> ] <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第77步
分析栈:digit ] <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit ] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第78步
分析栈:] <赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:] = { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ]匹配 

第79步
分析栈:<赋初值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:= { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋初值>->=<右值>

第80步
分析栈:= <右值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:= { digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: =匹配 

第81步
分析栈:<右值> ; <声明语句闭包> <函数块闭包> } # 
遗留串:{ digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <右值>->{<多个数据>}

第82步
分析栈:{ <多个数据> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:{ digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: {匹配 

第83步
分析栈:<多个数据> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <多个数据>-><数字><数字闭包>

第84步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第85步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第86步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第87步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第88步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第89步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第90步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第91步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第92步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第93步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第94步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第95步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第96步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第97步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第98步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第99步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第100步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第101步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第102步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第103步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第104步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第105步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第106步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第107步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第108步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第109步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第110步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第111步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第112步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第113步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第114步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第115步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第116步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第117步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第118步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第119步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第120步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第121步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第122步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第123步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第124步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第125步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第126步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第127步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第128步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第129步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第130步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第131步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第132步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第133步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第134步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第135步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第136步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第137步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第138步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第139步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第140步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第141步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第142步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第143步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第144步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第145步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第146步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第147步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第148步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第149步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第150步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第151步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第152步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第153步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第154步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第155步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第156步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第157步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit , digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第158步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->,<数字><数字闭包>

第159步
分析栈:, <数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:, digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ,匹配 

第160步
分析栈:<数字> <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第161步
分析栈:digit <数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:digit } ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第162步
分析栈:<数字闭包> } ; <声明语句闭包> <函数块闭包> } # 
遗留串:} ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字闭包>->$

第163步
分析栈:} ; <声明语句闭包> <函数块闭包> } # 
遗留串:} ; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: }匹配 

第164步
分析栈:; <声明语句闭包> <函数块闭包> } # 
遗留串:; for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第165步
分析栈:<声明语句闭包> <函数块闭包> } # 
遗留串:for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句闭包>->$

第166步
分析栈:<函数块闭包> } # 
遗留串:for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>-><for循环><函数块闭包>

第167步
分析栈:<for循环> <函数块闭包> } # 
遗留串:for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <for循环>->for(<赋值函数><逻辑表达式>;<后缀表达式>){<函数块>}

第168步
分析栈:for ( <赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:for ( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: for匹配 

第169步
分析栈:( <赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:( id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: (匹配 

第170步
分析栈:<赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋值函数>-><变量><赋值或函数调用>

第171步
分析栈:<变量> <赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第172步
分析栈:<标志符> <数组下标> <赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第173步
分析栈:id <数组下标> <赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id = digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第174步
分析栈:<数组下标> <赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:= digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第175步
分析栈:<赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:= digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋值或函数调用>->=<右值>;

第176步
分析栈:= <右值> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:= digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: =匹配 

第177步
分析栈:<右值> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <右值>-><表达式>

第178步
分析栈:<表达式> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第179步
分析栈:<因子> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第180步
分析栈:<因式> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第181步
分析栈:<数字> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第182步
分析栈:digit <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第183步
分析栈:<因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第184步
分析栈:<项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第185步
分析栈:; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:; id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第186步
分析栈:<逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <逻辑表达式>-><表达式><逻辑运算符><表达式>

第187步
分析栈:<表达式> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第188步
分析栈:<因子> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第189步
分析栈:<因式> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第190步
分析栈:<变量> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第191步
分析栈:<标志符> <数组下标> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第192步
分析栈:id <数组下标> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第193步
分析栈:<数组下标> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第194步
分析栈:<因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第195步
分析栈:<项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第196步
分析栈:<逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <逻辑运算符>-><

第197步
分析栈:< <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <匹配 

第198步
分析栈:<表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第199步
分析栈:<因子> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第200步
分析栈:<因式> <因式递归> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第201步
分析栈:<数字> <因式递归> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第202步
分析栈:digit <因式递归> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第203步
分析栈:<因式递归> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第204步
分析栈:<项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第205步
分析栈:; <后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:; id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第206步
分析栈:<后缀表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <后缀表达式>-><变量><后缀运算符>

第207步
分析栈:<变量> <后缀运算符> ) { <函数块> } <函数块闭包> } # 
遗留串:id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第208步
分析栈:<标志符> <数组下标> <后缀运算符> ) { <函数块> } <函数块闭包> } # 
遗留串:id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第209步
分析栈:id <数组下标> <后缀运算符> ) { <函数块> } <函数块闭包> } # 
遗留串:id ++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第210步
分析栈:<数组下标> <后缀运算符> ) { <函数块> } <函数块闭包> } # 
遗留串:++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第211步
分析栈:<后缀运算符> ) { <函数块> } <函数块闭包> } # 
遗留串:++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <后缀运算符>->++

第212步
分析栈:++ ) { <函数块> } <函数块闭包> } # 
遗留串:++ ) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ++匹配 

第213步
分析栈:) { <函数块> } <函数块闭包> } # 
遗留串:) { for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: )匹配 

第214步
分析栈:{ <函数块> } <函数块闭包> } # 
遗留串:{ for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: {匹配 

第215步
分析栈:<函数块> } <函数块闭包> } # 
遗留串:for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块>-><声明语句闭包><函数块闭包>

第216步
分析栈:<声明语句闭包> <函数块闭包> } <函数块闭包> } # 
遗留串:for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句闭包>->$

第217步
分析栈:<函数块闭包> } <函数块闭包> } # 
遗留串:for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>-><for循环><函数块闭包>

第218步
分析栈:<for循环> <函数块闭包> } <函数块闭包> } # 
遗留串:for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <for循环>->for(<赋值函数><逻辑表达式>;<后缀表达式>){<函数块>}

第219步
分析栈:for ( <赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:for ( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: for匹配 

第220步
分析栈:( <赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:( id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: (匹配 

第221步
分析栈:<赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋值函数>-><变量><赋值或函数调用>

第222步
分析栈:<变量> <赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第223步
分析栈:<标志符> <数组下标> <赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第224步
分析栈:id <数组下标> <赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第225步
分析栈:<数组下标> <赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:= id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第226步
分析栈:<赋值或函数调用> <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:= id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋值或函数调用>->=<右值>;

第227步
分析栈:= <右值> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:= id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: =匹配 

第228步
分析栈:<右值> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <右值>-><表达式>

第229步
分析栈:<表达式> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第230步
分析栈:<因子> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第231步
分析栈:<因式> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第232步
分析栈:<变量> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第233步
分析栈:<标志符> <数组下标> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第234步
分析栈:id <数组下标> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第235步
分析栈:<数组下标> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第236步
分析栈:<因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第237步
分析栈:<项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->+<因子><项>

第238步
分析栈:+ <因子> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: +匹配 

第239步
分析栈:<因子> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第240步
分析栈:<因式> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第241步
分析栈:<数字> <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第242步
分析栈:digit <因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第243步
分析栈:<因式递归> <项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第244步
分析栈:<项> ; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第245步
分析栈:; <逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:; id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第246步
分析栈:<逻辑表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <逻辑表达式>-><表达式><逻辑运算符><表达式>

第247步
分析栈:<表达式> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第248步
分析栈:<因子> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第249步
分析栈:<因式> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第250步
分析栈:<变量> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第251步
分析栈:<标志符> <数组下标> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第252步
分析栈:id <数组下标> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id < digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第253步
分析栈:<数组下标> <因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:< digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第254步
分析栈:<因式递归> <项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:< digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第255步
分析栈:<项> <逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:< digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第256步
分析栈:<逻辑运算符> <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:< digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <逻辑运算符>-><

第257步
分析栈:< <表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:< digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <匹配 

第258步
分析栈:<表达式> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第259步
分析栈:<因子> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第260步
分析栈:<因式> <因式递归> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第261步
分析栈:<数字> <因式递归> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第262步
分析栈:digit <因式递归> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第263步
分析栈:<因式递归> <项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第264步
分析栈:<项> ; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第265步
分析栈:; <后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:; id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第266步
分析栈:<后缀表达式> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <后缀表达式>-><变量><后缀运算符>

第267步
分析栈:<变量> <后缀运算符> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第268步
分析栈:<标志符> <数组下标> <后缀运算符> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第269步
分析栈:id <数组下标> <后缀运算符> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:id -- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第270步
分析栈:<数组下标> <后缀运算符> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:-- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第271步
分析栈:<后缀运算符> ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:-- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <后缀运算符>->--

第272步
分析栈:-- ) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:-- ) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: --匹配 

第273步
分析栈:) { <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:) { if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: )匹配 

第274步
分析栈:{ <函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:{ if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: {匹配 

第275步
分析栈:<函数块> } <函数块闭包> } <函数块闭包> } # 
遗留串:if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块>-><声明语句闭包><函数块闭包>

第276步
分析栈:<声明语句闭包> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句闭包>->$

第277步
分析栈:<函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>-><条件语句><函数块闭包>

第278步
分析栈:<条件语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <条件语句>->if(<逻辑表达式>){<函数块>}<否则语句>

第279步
分析栈:if ( <逻辑表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:if ( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: if匹配 

第280步
分析栈:( <逻辑表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:( id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: (匹配 

第281步
分析栈:<逻辑表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <逻辑表达式>-><表达式><逻辑运算符><表达式>

第282步
分析栈:<表达式> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第283步
分析栈:<因子> <项> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第284步
分析栈:<因式> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第285步
分析栈:<变量> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第286步
分析栈:<标志符> <数组下标> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第287步
分析栈:id <数组下标> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id == digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第288步
分析栈:<数组下标> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:== digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第289步
分析栈:<因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:== digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第290步
分析栈:<项> <逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:== digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第291步
分析栈:<逻辑运算符> <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:== digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <逻辑运算符>->==

第292步
分析栈:== <表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:== digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ==匹配 

第293步
分析栈:<表达式> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第294步
分析栈:<因子> <项> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第295步
分析栈:<因式> <因式递归> <项> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第296步
分析栈:<数字> <因式递归> <项> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第297步
分析栈:digit <因式递归> <项> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第298步
分析栈:<因式递归> <项> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第299步
分析栈:<项> ) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第300步
分析栈:) { <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:) { id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: )匹配 

第301步
分析栈:{ <函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:{ id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: {匹配 

第302步
分析栈:<函数块> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块>-><声明语句闭包><函数块闭包>

第303步
分析栈:<声明语句闭包> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句闭包>->$

第304步
分析栈:<函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>-><赋值函数><函数块闭包>

第305步
分析栈:<赋值函数> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋值函数>-><变量><赋值或函数调用>

第306步
分析栈:<变量> <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第307步
分析栈:<标志符> <数组下标> <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第308步
分析栈:id <数组下标> <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id [ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第309步
分析栈:<数组下标> <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:[ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->[<因式>]

第310步
分析栈:[ <因式> ] <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:[ id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: [匹配 

第311步
分析栈:<因式> ] <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第312步
分析栈:<变量> ] <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第313步
分析栈:<标志符> <数组下标> ] <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第314步
分析栈:id <数组下标> ] <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第315步
分析栈:<数组下标> ] <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第316步
分析栈:] <赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:] = id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ]匹配 

第317步
分析栈:<赋值或函数调用> <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:= id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋值或函数调用>->=<右值>;

第318步
分析栈:= <右值> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:= id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: =匹配 

第319步
分析栈:<右值> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <右值>-><表达式>

第320步
分析栈:<表达式> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第321步
分析栈:<因子> <项> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第322步
分析栈:<因式> <因式递归> <项> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第323步
分析栈:<变量> <因式递归> <项> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第324步
分析栈:<标志符> <数组下标> <因式递归> <项> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第325步
分析栈:id <数组下标> <因式递归> <项> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:id ; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第326步
分析栈:<数组下标> <因式递归> <项> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第327步
分析栈:<因式递归> <项> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第328步
分析栈:<项> ; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第329步
分析栈:; <函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:; } } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第330步
分析栈:<函数块闭包> } <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:} } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>->$

第331步
分析栈:} <否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:} } } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: }匹配 

第332步
分析栈:<否则语句> <函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:} } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <否则语句>->$

第333步
分析栈:<函数块闭包> } <函数块闭包> } <函数块闭包> } # 
遗留串:} } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>->$

第334步
分析栈:} <函数块闭包> } <函数块闭包> } # 
遗留串:} } while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: }匹配 

第335步
分析栈:<函数块闭包> } <函数块闭包> } # 
遗留串:} while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>->$

第336步
分析栈:} <函数块闭包> } # 
遗留串:} while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: }匹配 

第337步
分析栈:<函数块闭包> } # 
遗留串:while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>-><while循环><函数块闭包>

第338步
分析栈:<while循环> <函数块闭包> } # 
遗留串:while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <while循环>->while(<逻辑表达式>){<函数块>}

第339步
分析栈:while ( <逻辑表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:while ( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: while匹配 

第340步
分析栈:( <逻辑表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:( id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: (匹配 

第341步
分析栈:<逻辑表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <逻辑表达式>-><表达式><逻辑运算符><表达式>

第342步
分析栈:<表达式> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第343步
分析栈:<因子> <项> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第344步
分析栈:<因式> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第345步
分析栈:<变量> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第346步
分析栈:<标志符> <数组下标> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第347步
分析栈:id <数组下标> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:id < digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第348步
分析栈:<数组下标> <因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第349步
分析栈:<因式递归> <项> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第350步
分析栈:<项> <逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第351步
分析栈:<逻辑运算符> <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <逻辑运算符>-><

第352步
分析栈:< <表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:< digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <匹配 

第353步
分析栈:<表达式> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第354步
分析栈:<因子> <项> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第355步
分析栈:<因式> <因式递归> <项> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第356步
分析栈:<数字> <因式递归> <项> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第357步
分析栈:digit <因式递归> <项> ) { <函数块> } <函数块闭包> } # 
遗留串:digit ) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第358步
分析栈:<因式递归> <项> ) { <函数块> } <函数块闭包> } # 
遗留串:) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第359步
分析栈:<项> ) { <函数块> } <函数块闭包> } # 
遗留串:) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第360步
分析栈:) { <函数块> } <函数块闭包> } # 
遗留串:) { id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: )匹配 

第361步
分析栈:{ <函数块> } <函数块闭包> } # 
遗留串:{ id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: {匹配 

第362步
分析栈:<函数块> } <函数块闭包> } # 
遗留串:id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块>-><声明语句闭包><函数块闭包>

第363步
分析栈:<声明语句闭包> <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <声明语句闭包>->$

第364步
分析栈:<函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <函数块闭包>-><赋值函数><函数块闭包>

第365步
分析栈:<赋值函数> <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋值函数>-><变量><赋值或函数调用>

第366步
分析栈:<变量> <赋值或函数调用> <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第367步
分析栈:<标志符> <数组下标> <赋值或函数调用> <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第368步
分析栈:id <数组下标> <赋值或函数调用> <函数块闭包> } <函数块闭包> } # 
遗留串:id = id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第369步
分析栈:<数组下标> <赋值或函数调用> <函数块闭包> } <函数块闭包> } # 
遗留串:= id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第370步
分析栈:<赋值或函数调用> <函数块闭包> } <函数块闭包> } # 
遗留串:= id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <赋值或函数调用>->=<右值>;

第371步
分析栈:= <右值> ; <函数块闭包> } <函数块闭包> } # 
遗留串:= id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: =匹配 

第372步
分析栈:<右值> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <右值>-><表达式>

第373步
分析栈:<表达式> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第374步
分析栈:<因子> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第375步
分析栈:<因式> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第376步
分析栈:<变量> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第377步
分析栈:<标志符> <数组下标> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第378步
分析栈:id <数组下标> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第379步
分析栈:<数组下标> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第380步
分析栈:<因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第381步
分析栈:<项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->+<因子><项>

第382步
分析栈:+ <因子> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: +匹配 

第383步
分析栈:<因子> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第384步
分析栈:<因式> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第385步
分析栈:<数字> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第386步
分析栈:digit <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:digit * ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第387步
分析栈:<因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:* ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->*<因式><因式递归>

第388步
分析栈:* <因式> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:* ( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: *匹配 

第389步
分析栈:<因式> <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>->(<表达式>)

第390步
分析栈:( <表达式> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:( id + digit ) ; } id ( string ) ; return digit ; } # 
行为: (匹配 

第391步
分析栈:<表达式> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <表达式>-><因子><项>

第392步
分析栈:<因子> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第393步
分析栈:<因式> <因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><变量>

第394步
分析栈:<变量> <因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第395步
分析栈:<标志符> <数组下标> <因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ) ; } id ( string ) ; return digit ; } # 
行为: <标志符>->id

第396步
分析栈:id <数组下标> <因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:id + digit ) ; } id ( string ) ; return digit ; } # 
行为: id匹配 

第397步
分析栈:<数组下标> <因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit ) ; } id ( string ) ; return digit ; } # 
行为: <数组下标>->$

第398步
分析栈:<因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第399步
分析栈:<项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit ) ; } id ( string ) ; return digit ; } # 
行为: <项>->+<因子><项>

第400步
分析栈:+ <因子> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:+ digit ) ; } id ( string ) ; return digit ; } # 
行为: +匹配 

第401步
分析栈:<因子> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) ; } id ( string ) ; return digit ; } # 
行为: <因子>-><因式><因式递归>

第402步
分析栈:<因式> <因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) ; } id ( string ) ; return digit ; } # 
行为: <因式>-><数字>

第403步
分析栈:<数字> <因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) ; } id ( string ) ; return digit ; } # 
行为: <数字>->digit

第404步
分析栈:digit <因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:digit ) ; } id ( string ) ; return digit ; } # 
行为: digit匹配 

第405步
分析栈:<因式递归> <项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:) ; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第406步
分析栈:<项> ) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:) ; } id ( string ) ; return digit ; } # 
行为: <项>->$

第407步
分析栈:) <因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:) ; } id ( string ) ; return digit ; } # 
行为: )匹配 

第408步
分析栈:<因式递归> <项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:; } id ( string ) ; return digit ; } # 
行为: <因式递归>->$

第409步
分析栈:<项> ; <函数块闭包> } <函数块闭包> } # 
遗留串:; } id ( string ) ; return digit ; } # 
行为: <项>->$

第410步
分析栈:; <函数块闭包> } <函数块闭包> } # 
遗留串:; } id ( string ) ; return digit ; } # 
行为: ;匹配 

第411步
分析栈:<函数块闭包> } <函数块闭包> } # 
遗留串:} id ( string ) ; return digit ; } # 
行为: <函数块闭包>->$

第412步
分析栈:} <函数块闭包> } # 
遗留串:} id ( string ) ; return digit ; } # 
行为: }匹配 

第413步
分析栈:<函数块闭包> } # 
遗留串:id ( string ) ; return digit ; } # 
行为: <函数块闭包>-><赋值函数><函数块闭包>

第414步
分析栈:<赋值函数> <函数块闭包> } # 
遗留串:id ( string ) ; return digit ; } # 
行为: <赋值函数>-><变量><赋值或函数调用>

第415步
分析栈:<变量> <赋值或函数调用> <函数块闭包> } # 
遗留串:id ( string ) ; return digit ; } # 
行为: <变量>-><标志符><数组下标>

第416步
分析栈:<标志符> <数组下标> <赋值或函数调用> <函数块闭包> } # 
遗留串:id ( string ) ; return digit ; } # 
行为: <标志符>->id

第417步
分析栈:id <数组下标> <赋值或函数调用> <函数块闭包> } # 
遗留串:id ( string ) ; return digit ; } # 
行为: id匹配 

第418步
分析栈:<数组下标> <赋值或函数调用> <函数块闭包> } # 
遗留串:( string ) ; return digit ; } # 
行为: <数组下标>->$

第419步
分析栈:<赋值或函数调用> <函数块闭包> } # 
遗留串:( string ) ; return digit ; } # 
行为: <赋值或函数调用>->(<参数列表>);

第420步
分析栈:( <参数列表> ) ; <函数块闭包> } # 
遗留串:( string ) ; return digit ; } # 
行为: (匹配 

第421步
分析栈:<参数列表> ) ; <函数块闭包> } # 
遗留串:string ) ; return digit ; } # 
行为: <参数列表>-><参数><参数闭包>

第422步
分析栈:<参数> <参数闭包> ) ; <函数块闭包> } # 
遗留串:string ) ; return digit ; } # 
行为: <参数>-><字符串>

第423步
分析栈:<字符串> <参数闭包> ) ; <函数块闭包> } # 
遗留串:string ) ; return digit ; } # 
行为: <字符串>->string

第424步
分析栈:string <参数闭包> ) ; <函数块闭包> } # 
遗留串:string ) ; return digit ; } # 
行为: string匹配 

第425步
分析栈:<参数闭包> ) ; <函数块闭包> } # 
遗留串:) ; return digit ; } # 
行为: <参数闭包>->$

第426步
分析栈:) ; <函数块闭包> } # 
遗留串:) ; return digit ; } # 
行为: )匹配 

第427步
分析栈:; <函数块闭包> } # 
遗留串:; return digit ; } # 
行为: ;匹配 

第428步
分析栈:<函数块闭包> } # 
遗留串:return digit ; } # 
行为: <函数块闭包>-><函数返回><函数块闭包>

第429步
分析栈:<函数返回> <函数块闭包> } # 
遗留串:return digit ; } # 
行为: <函数返回>->return<因式>;

第430步
分析栈:return <因式> ; <函数块闭包> } # 
遗留串:return digit ; } # 
行为: return匹配 

第431步
分析栈:<因式> ; <函数块闭包> } # 
遗留串:digit ; } # 
行为: <因式>-><数字>

第432步
分析栈:<数字> ; <函数块闭包> } # 
遗留串:digit ; } # 
行为: <数字>->digit

第433步
分析栈:digit ; <函数块闭包> } # 
遗留串:digit ; } # 
行为: digit匹配 

第434步
分析栈:; <函数块闭包> } # 
遗留串:; } # 
行为: ;匹配 

第435步
分析栈:<函数块闭包> } # 
遗留串:} # 
行为: <函数块闭包>->$

第436步
分析栈:} # 
遗留串:} # 
行为: }匹配 

第437步
分析栈:# 
遗留串:# 
成功!

----------------------------------语法树---------------------------------------

<函数定义>
  }
  <函数块>
  {
  )
  <参数声明>
  (
  <变量>
  <类型>
  <修饰词闭包>
    <函数块闭包>
    <声明语句闭包>
    <数组下标>
    <标志符>
    <取地址>
    type
      <函数块闭包>
      <for循环>
      <声明语句闭包>
      <声明语句>
      id
      <星号闭包>
        <函数块闭包>
        <while循环>
        }
        <函数块>
        {
        )
        <后缀表达式>
        ;
        <逻辑表达式>
        <赋值函数>
        (
        for
        <声明语句闭包>
        <声明语句>
        ;
        <声明>
          <函数块闭包>
          <赋值函数>
          }
          <函数块>
          {
          )
          <逻辑表达式>
          (
          while
          <函数块闭包>
          <声明语句闭包>
          <后缀运算符>
          <变量>
          <表达式>
          <逻辑运算符>
          <表达式>
          <赋值或函数调用>
          <变量>
          <声明语句闭包>
          <声明语句>
          ;
          <声明>
          <赋初值>
          <变量>
          <类型>
          <修饰词闭包>
            <函数块闭包>
            <函数返回>
            <赋值或函数调用>
            <变量>
            <函数块闭包>
            <声明语句闭包>
            <表达式>
            <逻辑运算符>
            <表达式>
            <函数块闭包>
            <for循环>
            ++
            <数组下标>
            <标志符>
            <项>
            <因子>
            <
            <项>
            <因子>
            ;
            <右值>
            =
            <数组下标>
            <标志符>
            ;
            <声明>
            <赋初值>
            <变量>
            <类型>
            <修饰词闭包>
            <右值>
            =
            <数组下标>
            <标志符>
            <取地址>
            type
              ;
              <因式>
              return
              ;
              )
              <参数列表>
              (
              <数组下标>
              <标志符>
              <函数块闭包>
              <赋值函数>
              <项>
              <因子>
              <
              <项>
              <因子>
              }
              <函数块>
              {
              )
              <后缀表达式>
              ;
              <逻辑表达式>
              <赋值函数>
              (
              for
              id
              <因式递归>
              <因式>
              <因式递归>
              <因式>
              <表达式>
              id
              <赋初值>
              <变量>
              <类型>
              <修饰词闭包>
              <右值>
              =
              <数组下标>
              <标志符>
              <取地址>
              type
              <表达式>
              id
              <星号闭包>
                <数字>
                <参数闭包>
                <参数>
                id
                <赋值或函数调用>
                <变量>
                <因式递归>
                <因式>
                <因式递归>
                <因式>
                <函数块闭包>
                <声明语句闭包>
                <后缀运算符>
                <变量>
                <表达式>
                <逻辑运算符>
                <表达式>
                <赋值或函数调用>
                <变量>
                <数字>
                <变量>
                <项>
                <因子>
                <右值>
                =
                <数组下标>
                <标志符>
                <取地址>
                type
                <表达式>
                id
                <星号闭包>
                <项>
                <因子>
                  digit
                  <字符串>
                  ;
                  <右值>
                  =
                  <数组下标>
                  <标志符>
                  <数字>
                  <变量>
                  <函数块闭包>
                  <条件语句>
                  --
                  <数组下标>
                  <标志符>
                  <项>
                  <因子>
                  <
                  <项>
                  <因子>
                  ;
                  <右值>
                  =
                  <数组下标>
                  <标志符>
                  digit
                  <数组下标>
                  <标志符>
                  <因式递归>
                  <因式>
                  }
                  <多个数据>
                  {
                  ]
                  <因式>
                  [
                  id
                  <星号闭包>
                  <项>
                  <因子>
                  <因式递归>
                  <因式>
                    string
                    <表达式>
                    id
                    digit
                    <数组下标>
                    <标志符>
                    <否则语句>
                    }
                    <函数块>
                    {
                    )
                    <逻辑表达式>
                    (
                    if
                    id
                    <因式递归>
                    <因式>
                    <因式递归>
                    <因式>
                    <表达式>
                    id
                    id
                    <数字>
                    <数字闭包>
                    <数字>
                    <数字>
                    <因式递归>
                    <因式>
                    <数字>
                      <项>
                      <因子>
                      id
                      <函数块闭包>
                      <声明语句闭包>
                      <表达式>
                      <逻辑运算符>
                      <表达式>
                      <数字>
                      <变量>
                      <项>
                      <因子>
                      digit
                      <数字闭包>
                      <数字>
                      ,
                      digit
                      digit
                      <数字>
                      digit
                        <项>
                        <因子>
                        +
                        <因式递归>
                        <因式>
                        <函数块闭包>
                        <赋值函数>
                        <项>
                        <因子>
                        ==
                        <项>
                        <因子>
                        digit
                        <数组下标>
                        <标志符>
                        <项>
                        <因子>
                        +
                        <因式递归>
                        <因式>
                        <数字闭包>
                        <数字>
                        ,
                        digit
                        digit
                          <因式递归>
                          <因式>
                          <变量>
                          <赋值或函数调用>
                          <变量>
                          <因式递归>
                          <因式>
                          <因式递归>
                          <因式>
                          id
                          <因式递归>
                          <因式>
                          <变量>
                          <数字闭包>
                          <数字>
                          ,
                          digit
                            <因式递归>
                            <因式>
                            *
                            <数字>
                            <数组下标>
                            <标志符>
                            ;
                            <右值>
                            =
                            <数组下标>
                            <标志符>
                            <数字>
                            <变量>
                            <数字>
                            <数组下标>
                            <标志符>
                            <数字闭包>
                            <数字>
                            ,
                            digit
                              )
                              <表达式>
                              (
                              digit
                              id
                              <表达式>
                              ]
                              <因式>
                              [
                              id
                              digit
                              <数组下标>
                              <标志符>
                              digit
                              id
                              <数字闭包>
                              <数字>
                              ,
                              digit
                                <项>
                                <因子>
                                <项>
                                <因子>
                                <变量>
                                id
                                <数字闭包>
                                <数字>
                                ,
                                digit
                                  <项>
                                  <因子>
                                  +
                                  <因式递归>
                                  <因式>
                                  <因式递归>
                                  <因式>
                                  <数组下标>
                                  <标志符>
                                  <数字闭包>
                                  <数字>
                                  ,
                                  digit
                                    <因式递归>
                                    <因式>
                                    <变量>
                                    <变量>
                                    id
                                    <数字闭包>
                                    <数字>
                                    ,
                                    digit
                                      <数字>
                                      <数组下标>
                                      <标志符>
                                      <数组下标>
                                      <标志符>
                                      <数字闭包>
                                      <数字>
                                      ,
                                      digit
                                        digit
                                        id
                                        id
                                        <数字闭包>
                                        <数字>
                                        ,
                                        digit
                                          <数字闭包>
                                          <数字>
                                          ,
                                          digit
                                            <数字闭包>
                                            <数字>
                                            ,
                                            digit
                                              <数字闭包>
                                              <数字>
                                              ,
                                              digit
                                                <数字闭包>
                                                <数字>
                                                ,
                                                digit
                                                  <数字闭包>
                                                  <数字>
                                                  ,
                                                  digit
                                                    <数字闭包>
                                                    <数字>
                                                    ,
                                                    digit
                                                      <数字闭包>
                                                      <数字>
                                                      ,
                                                      digit
                                                        <数字闭包>
                                                        <数字>
                                                        ,
                                                        digit
                                                          <数字闭包>
                                                          <数字>
                                                          ,
                                                          digit
                                                            digit
